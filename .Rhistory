abline(h=min(cv.err)+cv.err.sd[which.min(cv.err)],lty=1,col="organe")
####################(c)###########################
set.seed(1)
n <- nrow(Wage)
cv.label <- sample(10,n,replace=T)
J.seq <- 0:20
cv.err.mat <- matrix(0,10,21)
for(k in 1:10){
for(j in 1:21){
if(J.seq[j]==0){
m.step <- lm(wage~1,data=Wage[cv.label!=k,])
}else{
m.step <- lm(wage~cut(age,
seq(15,85,length.out=J.seq[j]+2)),
data=Wage[cv.label!=k,])
}
m.step.y <- predict(m.step,newdata=Wage[cv.label==k,])
cv.err.mat[k,j] <- mean((m.step.y-Wage$wage[cv.label==k])^2)
}
}
cv.err <- colMeans(cv.err.mat)
cv.err.sd <- apply(cv.err.mat,2,sd)/sqrt(10)
plot(J.seq,cv.err,type="b",xlab="number of intervals",ylab="error")
plot(Wage$age,Wage$wage,pch=20,col="grey",
xlab="age",ylab="wage")
plot.x <- seq(min(Wage$age),max(Wage$age),length.out=100)
m.step <- lm(wage~cut(age, seq(15,85,length.out=5)),
data=Wage)
m.step.y <- predict(m.step,newdata=data.frame(age=plot_age))
lines(plot_age,m.step.y,col="red",lwd=3,lty=2)
knots <- seq(15,85,length.out=5)
for(k in 1:5){
abline(v=knots[k],lty=3)
}
plot(Wage$age,Wage$wage,pch=20,col="grey",
xlab="age",ylab="wage")
plot.x <- seq(min(Wage$age),max(Wage$age),length.out=100)
m.step <- lm(wage~cut(age, seq(15,85,length.out=5)),
data=Wage)
m.step.y <- predict(m.step,newdata=data.frame(age=plot_age))
lines(plot_age,m.step.y,col="red",lwd=3,lty=2)
plot(Wage$age,Wage$wage,pch=20,col="grey",
xlab="age",ylab="wage")
plot.x <- seq(min(Wage$age),max(Wage$age),length.out=100)
m.step <- lm(wage~cut(age, seq(15,85,length.out=5)),
data=Wage)
m.step.y <- predict(m.step,newdata=data.frame(age=plot_age))
lines(plot_age,m.step.y,col="red",lwd=3,lty=1)
legend("topright", legend="Step Function",col="red", lty=1, cex=0.6)
####################(d)###########################
#linear regression
lm<-lm(wage~age+maritl+jobclass, data=Wage)
summary(lm)
pred_lm<-predict(lm,newdata=data.frame(age=plot_age))
plot_age<- seq(min(Wage$age),max(Wage$age),length.out=100)
plot_maritl<-seq(min(Wage$maritl),max(Wage$maritl),length.out=100)
plot_maritl<-seq(Wage$maritl,length.out=100)
####################(d)###########################
#linear regression
lm<-lm(wage~age+maritl+jobclass, data=Wage)
#Linear regression with AIC
lm_AIC<-step(lm)
#===Linear Regression with BIC===#
lm_BIC<- step(lm, k = log(nrow(train_avg)))
#===Linear Regression with BIC===#
lm_BIC<- step(lm, k = log(nrow(wage)))
#===Linear Regression with BIC===#
lm_BIC<- step(lm, k = log(nrow(Wage)))
summary(lm_BIC)
#===Linear Regression with BIC===#
lm_BIC<- step(lm, k = log(nrow(Wage)))
m3 <- lm(wage~age+I(age^2)+I(age^3)+maritl+I(maritl^2)+I(maritl^3)+jobclass+I(jobclass^2)+I(jobclass^3),data=Wage)
linear_spline <- lm(wage~bs(age+maritl+jobclass,knots=c(20,50,80),degree=1),data=Wage)
####################(d)###########################
#linear regression
lm<-lm(wage~age+maritl+jobclass, data=Wage)
summary(lm)
#==========================Problem 3 ============================#
data(seatpos)
#==========================Problem 3 ============================#
library(faraway)
data(seatpos)
force(seatpos)
View(seatpos)
set.seed(1)
train_ind <- sample(1:nrow(seatpos), 0.8*nrow(seatpos))
train <- seatpos[train_ind, ]
test <- seatpos[-train_ind, ]
#(a)
knnFit2 <- train(hipcenter~., seatpos , method = "5nn", preProcess=c("pca"),
trControl = trainControl(method = "cv"))
install.packages("caret")
#(a)
library(caret)
knnFit2 <- train(hipcenter~., seatpos , method = "5nn", preProcess=c("pca"),
trControl = trainControl(method = "cv"))
knnFit2 <- train(hipcenter~., seatpos , method = "knn", preProcess=c("pca"),
trControl = trainControl(method = "cv"))
knnFit2
knnFit2 <- train(hipcenter~., train , method = "knn", preProcess=c("pca"),
trControl = trainControl(method = "cv"))
knnFit2
#(a)
library(ISLR)
library(dplyr)
library(tidyr)
library(pls)
set.seed(1)
pcr_fit = pcr(hipcenter~., data = sesatpos, scale = TRUE, validation = "CV")
pcr_fit = pcr(hipcenter~., data = seatpos, scale = TRUE, validation = "CV")
summary(pcr_fit)
pcr_fit = pcr(hipcenter~., data = seatpos, scale = TRUE, validation = "5CV")
pcr_fit = pcr(hipcenter~., data = seatpos, scale = TRUE, validation = "5\CV")
pcr_fit = pcr(hipcenter~., data = seatpos, scale = TRUE, validation = "CV")
summary(pcr_fit)
nfold <- 5
infold <- sample(rep(1:nfold, length.out=nrow(train)))
cv.error <- matrix(0, nrow = 10, ncol = 20)
for(i in 1:nfold){
pca.i <- prcomp(train[infold != i,-1], center = T, scale. = T)
df <- data.frame(pca.i$x)
names(df) <- paste("PC", seq(1:14), sep="")
df$y <- train[infold != i,]$siri
cv.scale <- apply(train[infold == i,-1], 1, function(x)
+ (x- pca.i$center)/pca.i$scale )cv.pc <- t(cv.scale) %*% pca.i$rotation
for (k in 1:14){
pca.ik <- lm(df$y ~ as.matrix(df[,1:k]))
cv.pred <- cbind(1,cv.pc[,1:k]) %*% pca.ik$coefficients
cv.error[i,k] <- mean((cv.pred - train[infold == i,]$siri)^2)
} }
for(i in 1:nfold){
pca.i <- prcomp(train[infold != i,-1], center = T, scale. = T)
df <- data.frame(pca.i$x)
names(df) <- paste("PC", seq(1:14), sep="")
df$y <- train[infold != i,]$siri
cv.scale <- apply(train[infold == i,-1], 1, function(x) (x- pca.i$center)/pca.i$scale )
cv.pc <- t(cv.scale) %*% pca.i$rotation
for (k in 1:14){
pca.ik <- lm(df$y ~ as.matrix(df[,1:k]))
cv.pred <- cbind(1,cv.pc[,1:k]) %*% pca.ik$coefficients
cv.error[i,k] <- mean((cv.pred - train[infold == i,]$siri)^2)
}
}
for(i in 1:nfold){
pca.i <- prcomp(train[infold != i,-1], center = T, scale. = T)
df <- data.frame(pca.i$x)
names(df) <- paste("PC", seq(1:20), sep="")
df$y <- train[infold != i,]$siri
cv.scale <- apply(train[infold == i,-1], 1, function(x) (x- pca.i$center)/pca.i$scale )
cv.pc <- t(cv.scale) %*% pca.i$rotation
for (k in 1:20){
pca.ik <- lm(df$y ~ as.matrix(df[,1:k]))
cv.pred <- cbind(1,cv.pc[,1:k]) %*% pca.ik$coefficients
cv.error[i,k] <- mean((cv.pred - train[infold == i,]$siri)^2)
}
}
for(i in 1:nfold){
pca.i <- prcomp(train[infold != i,-1], center = T, scale. = T)
df <- data.frame(pca.i$x)
names(df) <- paste("PC", seq(1:9), sep="")
df$y <- train[infold != i,]$siri
cv.scale <- apply(train[infold == i,-1], 1, function(x) (x- pca.i$center)/pca.i$scale )
cv.pc <- t(cv.scale) %*% pca.i$rotation
for (k in 1:9){
pca.ik <- lm(df$y ~ as.matrix(df[,1:k]))
cv.pred <- cbind(1,cv.pc[,1:k]) %*% pca.ik$coefficients
cv.error[i,k] <- mean((cv.pred - train[infold == i,]$siri)^2)
}
}
nfold <- 5
infold <- sample(rep(1:nfold, length.out=nrow(train)))
cv.error <- matrix(0, nrow = 5, ncol = 9)
for(i in 1:nfold){
pca.i <- prcomp(train[infold != i,-1], center = T, scale. = T)
df <- data.frame(pca.i$x)
names(df) <- paste("PC", seq(1:9), sep="")
df$y <- train[infold != i,]$siri
cv.scale <- apply(train[infold == i,-1], 1, function(x) (x- pca.i$center)/pca.i$scale )
cv.pc <- t(cv.scale) %*% pca.i$rotation
for (k in 1:9){
pca.ik <- lm(df$y ~ as.matrix(df[,1:k]))
cv.pred <- cbind(1,cv.pc[,1:k]) %*% pca.ik$coefficients
cv.error[i,k] <- mean((cv.pred - train[infold == i,]$siri)^2)
}
}
infold <- sample(rep(1:nfold, length.out=nrow(train)))
cv.error <- matrix(0, nrow = 5, ncol = 20)
for(i in 1:nfold){
pca.i <- prcomp(train[infold != i,-1], center = T, scale. = T)
df <- data.frame(pca.i$x)
names(df) <- paste("PC", seq(1:9), sep="")
df$y <- train[infold != i,]$siri
cv.scale <- apply(train[infold == i,-1], 1, function(x) (x- pca.i$center)/pca.i$scale )
cv.pc <- t(cv.scale) %*% pca.i$rotation
for (k in 1:9){
pca.ik <- lm(df$y ~ as.matrix(df[,1:k]))
cv.pred <- cbind(1,cv.pc[,1:k]) %*% pca.ik$coefficients
cv.error[i,k] <- mean((cv.pred - train[infold == i,]$siri)^2)
}
}
for(i in 1:nfold){
pca.i <- prcomp(train[infold != i,-1], center = T, scale. = T)
df <- data.frame(pca.i$x)
names(df) <- paste("PC", seq(1:29), sep="")
df$y <- train[infold != i,]$siri
cv.scale <- apply(train[infold == i,-1], 1, function(x) (x- pca.i$center)/pca.i$scale )
cv.pc <- t(cv.scale) %*% pca.i$rotation
for (k in 1:20){
pca.ik <- lm(df$y ~ as.matrix(df[,1:k]))
cv.pred <- cbind(1,cv.pc[,1:k]) %*% pca.ik$coefficients
cv.error[i,k] <- mean((cv.pred - train[infold == i,]$siri)^2)
}
}
for(i in 1:nfold){
pca.i <- prcomp(train[infold != i,-1], center = T, scale. = T)
df <- data.frame(pca.i$x)
names(df) <- paste("PC", seq(1:20), sep="")
df$y <- train[infold != i,]$siri
cv.scale <- apply(train[infold == i,-1], 1, function(x) (x- pca.i$center)/pca.i$scale )
cv.pc <- t(cv.scale) %*% pca.i$rotation
for (k in 1:20){
pca.ik <- lm(df$y ~ as.matrix(df[,1:k]))
cv.pred <- cbind(1,cv.pc[,1:k]) %*% pca.ik$coefficients
cv.error[i,k] <- mean((cv.pred - train[infold == i,]$siri)^2)
}
}
for(i in 1:nfold){
pca.i <- prcomp(train[infold != i,-1], center = T, scale. = T)
df <- data.frame(pca.i$x)
names(df) <- paste("PC", seq(1:20), sep="")
df$y <- train[infold != i,]$siri
cv.scale <- apply(train[infold == i,-1], 1, function(x) (x- pca.i$center)/pca.i$scale )
cv.pc <- t(cv.scale) %*% pca.i$rotation
for (k in 1:5){
pca.ik <- lm(df$y ~ as.matrix(df[,1:k]))
cv.pred <- cbind(1,cv.pc[,1:k]) %*% pca.ik$coefficients
cv.error[i,k] <- mean((cv.pred - train[infold == i,]$siri)^2)
}
}
for(i in 1:nfold){
pca.i <- prcomp(train[infold != i,-1], center = T, scale. = T)
df <- data.frame(pca.i$x)
names(df) <- paste("PC", seq(1:5), sep="")
df$y <- train[infold != i,]$siri
cv.scale <- apply(train[infold == i,-1], 1, function(x) (x- pca.i$center)/pca.i$scale )
cv.pc <- t(cv.scale) %*% pca.i$rotation
for (k in 1:5){
pca.ik <- lm(df$y ~ as.matrix(df[,1:k]))
cv.pred <- cbind(1,cv.pc[,1:k]) %*% pca.ik$coefficients
cv.error[i,k] <- mean((cv.pred - train[infold == i,]$siri)^2)
}
}
for(i in 1:nfold){
pca.i <- prcomp(train[infold != i,-1], center = T, scale. = T)
df <- data.frame(pca.i$x)
names(df) <- paste("PC", seq(1:5), sep="")
df$y <- train[infold != i,]$hipcenter
cv.scale <- apply(train[infold == i,-1], 1, function(x) (x- pca.i$center)/pca.i$scale )
cv.pc <- t(cv.scale) %*% pca.i$rotation
for (k in 1:5){
pca.ik <- lm(df$y ~ as.matrix(df[,1:k]))
cv.pred <- cbind(1,cv.pc[,1:k]) %*% pca.ik$coefficients
cv.error[i,k] <- mean((cv.pred - train[infold == i,]$hipcenter)^2)
}
}
apply(cv.error, 2, mean)
which.min(apply(cv.error, 2, mean))
#aic
c <- regsubsets(hipcenter ~ ., data=seatpos)
summary(lm_AIC)
#aic
lm<-lm(hipcenter~.,data=seatpos)
lm_AIC<-step(lm)
#aic
lm<-lm(hipcenter~.,data=seatpos)
lm_AIC_seat<-step(lm)
#aic
lm_seat<-lm(hipcenter~.,data=seatpos)
lm_AIC_seat<-step(lm)
summary(lm_AIC_seat)
q()
#AIC
X<-seatpos[,1:8]
#==========================Problem 3 ============================#
library(faraway)
data(seatpos)
set.seed(1)
train_ind <- sample(1:nrow(seatpos), 0.8*nrow(seatpos))
train <- seatpos[train_ind, ]
test <- seatpos[-train_ind, ]
#(a)
library(ISLR)
library(dplyr)
library(tidyr)
library(pls)
#AIC
X<-seatpos[,1:8]
X<-scale(X,center=TRUE, scale=TRUE)
PCA<-prcomp(X)
PCA
#AIC
X<-seatpos[,1:10]
X<-scale(X,center=TRUE, scale=TRUE)
#AIC
X<-seatpos[,1:8]
X<-scale(X,center=TRUE, scale=TRUE)
PCA<-prcomp(X)
PCA
df<-data.frame(PCA$x)
names(df) <- seatspos$hiscenter
pclm<-lm(y~. data=df)
names(df) <- seatpos$hiscenter
pclm<-lm(y~. data=df)
pclm<-lm(y~. ,data=df)
pclm<-lm(y~.,data=df)
pclm<-lm(y~PC1+PC2+PC3+PC4+PC5+PC6+PC7+PC8,data=df)
df<-data.frame(PCA$x)
names(df) <- paste("PC",seq(1:8),sep="")
df$y<-seatpos$hiscenter
pclm<-lm(y~., data=df)
df$y<-seatpos$hipcenter
pclm<-lm(y~., data=df)
pclm_AIC<-step(pclm)
summary(pclm_AIC)
######(c)#####
####PCR with 5-CV
pcr_fit <- pcr(hipcenter~., data = train, scale = TRUE, validation = "CV")
validationplot(pcr_fit, val.type = "MSEP")
######(c)#####
####PCR with 5-CV
pcr_fit <- pcr(hipcenter~., data = train, scale = TRUE, validation = "CV",ncomp=5)
######(c)#####
####PCR with 5-CV
pcr_fit <- pcr(hipcenter~., data = train, scale = TRUE, validation = "CV",ncomp=6)
pcr_pred_AIC<- predict(pcr_fit, test, ncomp=6)
pcr_pred_CV<- predict(pcr_fit, test, ncomp=6)
mean((pcr_pred_CV-test)^2)
mean((pcr_pred_CV-test$hipcenter)^2)
######(c)#####
####PCR with 5-CV
pcr_fit <- pcr(hipcenter~., data = train, scale = TRUE, validation = "CV",ncomp=6)
pcr_pred_CV<- predict(pcr_fit, test[,-9], ncomp=6)
mean((pcr_pred_CV-test$hipcenter)^2)
######(c)#####
####PCR with 5-CV
pcr_fit <- pcr(hipcenter~., data = train, scale = TRUE,ncomp=6)
pcr_pred_CV<- predict(pcr_fit, test[,-9], ncomp=6)
mean((pcr_pred_CV-test$hipcenter)^2)
######(c)#####
####PCR with 5-CV
pcr_CV <- pcr(hipcenter~., data = train,scale =TRUE, validation = "CV")
pcr_pred_CV <- predict(pcr_CV, test, ncomp = 6)
mean((pcr_pred_CV - y_test)^2)
mean((pcr_pred_CV - test$hipcenter)^2)
pcr_pred_CV <- predict(pcr_CV, newdata=test, ncomp = 6)
mean((pcr_pred_CV - test$hipcenter)^2)
#==========================Problem 3 ============================#
library(faraway)
data(seatpos)
set.seed(1)
train_ind <- sample(1:nrow(seatpos), 0.8*nrow(seatpos))
train <- seatpos[train_ind, ]
test <- seatpos[-train_ind, ]
######(a)#####
library(ISLR)
library(dplyr)
library(tidyr)
library(pls)
#5-cv
nfold <- 5
infold <- sample(rep(1:nfold, length.out=nrow(train)))
cv.error <- matrix(0, nrow = 5, ncol = 20)
for(i in 1:nfold){
pca.i <- prcomp(train[infold != i,-1], center = T, scale. = T)
df <- data.frame(pca.i$x)
names(df) <- paste("PC", seq(1:5), sep="")
df$y <- train[infold != i,]$hipcenter
cv.scale <- apply(train[infold == i,-1], 1, function(x) (x- pca.i$center)/pca.i$scale )
cv.pc <- t(cv.scale) %*% pca.i$rotation
for (k in 1:5){
pca.ik <- lm(df$y ~ as.matrix(df[,1:k]))
cv.pred <- cbind(1,cv.pc[,1:k]) %*% pca.ik$coefficients
cv.error[i,k] <- mean((cv.pred - train[infold == i,]$hipcenter)^2)
}
}
apply(cv.error, 2, mean)
which.min(apply(cv.error, 2, mean))
######(c)#####
####PCR with 5-CV
pcr_CV <- pcr(hipcenter~., data = train,scale =TRUE, validation = "CV")
pcr_pred_CV <- predict(pcr_CV, newdata=test, ncomp = 6)
mean((pcr_pred_CV - test$hipcenter)^2)
install.packages("stepPlr")
library(stepPlr)
######(b)#####
x_b<-as.matrix(seatpos[,-9])
y_b<-as.vector(seatpos[,9])
cv.step.plr(x, y, weights = rep(1, length(y)),nfold = 5,)
cv.step.plr(x_b, y_b, weights = rep(1, length(y)),nfold = 5,)
cv.step.plr(x_b, y_b, weights = rep(1, length(y_b)),nfold = 5,)
######(b)#####
set.seed(1)
pls_fit = plsr(hipcenetr~., data = train, scale = TRUE, validation = "CV")
pls_fit = plsr(hipcenterr~., data = train, scale = TRUE, validation = "CV")
pls_fit = plsr(hipcenter~., data = train, scale = TRUE, validation = "CV")
summary(pls_fit)
validationplot(pls_fit, val.type = "MSEP")
pls_fit = plsr(hipcenter~., data = train, scale = TRUE, validation = "AIC")
cv.step.plr(x_b, y_b, cp = "aic")
?prcomp
######(b)#####
#aic
y <- train$hipcenter
pls.object<-pls.ic(train.x,y,m=ncol(train.x), criterion = "aic")
pls.object$m.opt
library(pls)
library(stepPlr)
pls.object<-pls.ic(train.x,y,m=ncol(train.x), criterion = "aic")
install.packages("plsdof")
######(b)#####
#aic
library(plsdof)
pls.object<-pls.ic(train.x,y,m=ncol(train.x), criterion = "aic")
#AIC
X<-seatpos[,1:8]
X<-scale(X,center=TRUE, scale=TRUE)
pls.object<-pls.ic(X,train$hipcenter,m=ncol(X), criterion = "aic")
pls.object<-pls.ic(X,train$hipcenter,m=ncol(X), criterion = "aic")
pls.object<-pls.ic(X,y,m=ncol(X), criterion = "aic")
#AIC
X<-seatpos[,1:8]
X<-scale(X,center=TRUE, scale=TRUE)
######(b)#####
#aic
library(plsdof)
y <- train$hipcenter
pls.object<-pls.ic(X,y,m=ncol(X), criterion = "aic")
Y <- train$hipcenter
pls.object<-pls.ic(X,Y,m=ncol(X), criterion = "aic")
pls.object<-pls.ic(X,Y,m = min(ncol(X),nrow(X)-1), criterion = "aic")
pls.object<-pls.ic(Y,X,m = min(ncol(X),nrow(X)-1), criterion = "aic")
pls.object<-pls.ic(Y,X,m = ncol(X), criterion = "aic")
pls.object<-pls.ic(Y,X,m = ncol(Y), criterion = "aic")
pls.object<-pls.ic(Y,X,m = ncol(X)+1, criterion = "aic")
pls.object<-pls.ic(Y,X,m = ncol(X), criterion = "aic")
pls.object<-pls.ic(Y,X, criterion = "aic")
pls.object<-pls.ic(X,Y criterion = "aic")
pls.object<-pls.ic(X,Y, criterion = "aic")
pls.object<-pls.ic(Y,X, criterion = "aic")
library(factoextra)
library(ggplot2)
library(RColorBrewer)
library(scales)
library(pls)
setwd("~/Desktop/5630 - machine learning/homework/mini project11.4")
data = read.csv("testdata.txt", sep = ' ')
#================ 1.a ==================
pca <- prcomp(data[ ,1:57], scale. = TRUE)
fviz_eig(pca)
library(plot3D)
library(dr)
library(MASS)
library(akima)
plot3d(pca$x[,1], pca$x[, 2], pca$x[,3], col= c("blue","red"), size=5)
library(akima)
plot3d(pca$x[,1], pca$x[, 2], pca$x[,3], col= c("blue","red"), size=5)
plot3D(pca$x[,1], pca$x[, 2], pca$x[,3], col= c("blue","red"), size=5)
plot3D::(pca$x[,1], pca$x[, 2], pca$x[,3], col= c("blue","red"), size=5)
plot3D(pca$x[,1], pca$x[, 2], pca$x[,3], col= c("blue","red"), size=5)
plot3d(pca$x[,1], pca$x[, 2], pca$x[,3], col= c("blue","red"), size=5)
library(plot3D)
library(dr)
library(MASS)
library(akima)
plot3d(pca$x[,1], pca$x[, 2], pca$x[,3], col= c("blue","red"), size=5)
library(scatterplot3d)
library(dr)
library(MASS)
library(akima)
plot3d(pca$x[,1], pca$x[, 2], pca$x[,3], col= c("blue","red"), size=5)
s = interp(pca$x[,1], pca$x[, 2], pca$x[,3], duplicate = "strip")
surface3d(s$x, s$y, s$z, col = 'gray', alpha = 0.4, add = T)
library(plot3D)
library(scatterplot3d)
library(dr)
library(MASS)
library(akima)
plot3d(pca$x[,1], pca$x[, 2], pca$x[,3], col= c("blue","red"), size=5)
library(factoextra)
library(ggplot2)
library(RColorBrewer)
library(scales)
library(pls)
plot3d(pca$x[,1], pca$x[, 2], pca$x[,3], col= c("blue","red"), size=5)
?plot3D
point3D(pca$x[,1], pca$x[, 2], pca$x[,3], col= c("blue","red"), size=5)
points3D(pca$x[,1], pca$x[, 2], pca$x[,3], col= c("blue","red"), size=5)
s = interp(pca$x[,1], pca$x[, 2], pca$x[,3], duplicate = "strip")
surf3D(s$x, s$y, s$z, col = 'gray', alpha = 0.4, add = T)
surf3D(as.matrix(s$x), as.matrix(s$y), as.matrix(s$z), col = 'gray', alpha = 0.4, add = T)
points3D(pca$x[,1], pca$x[, 2], pca$x[,3], col= c("blue","red"), size=5)
scatter3D(pca$x[,1], pca$x[, 2], pca$x[,3], col= c("blue","red"), size=5)
scatter3D(pca$x[,1], pca$x[, 2], pca$x[,3], col= c("blue","red"), size=5)
#================ 1.d ==================
library(mclust)
spam<-Mclust(pca$x[,1:2], G=2)
summary(spam)
spam$classification
ggplot(data, aes(pca$x[,1], pca$x[,2], color = V58)) +
geom_point(col = c("blue", "red")[spam$classification]) + # fitted cluster
scale_color_manual(values = c('blue', 'red'))
q()
